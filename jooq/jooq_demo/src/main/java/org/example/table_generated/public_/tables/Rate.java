/*
 * This file is generated by jOOQ.
 */
package org.example.table_generated.public_.tables;


import java.util.Collection;

import org.example.table_generated.public_.Keys;
import org.example.table_generated.public_.Public;
import org.example.table_generated.public_.tables.records.RateRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rate extends TableImpl<RateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rate</code>
     */
    public static final Rate RATE = new Rate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RateRecord> getRecordType() {
        return RateRecord.class;
    }

    /**
     * The column <code>public.rate.count</code>.
     */
    public final TableField<RateRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.rate.id</code>.
     */
    public final TableField<RateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.rate.ip</code>.
     */
    public final TableField<RateRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(255), this, "");

    private Rate(Name alias, Table<RateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Rate(Name alias, Table<RateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.rate</code> table reference
     */
    public Rate(String alias) {
        this(DSL.name(alias), RATE);
    }

    /**
     * Create an aliased <code>public.rate</code> table reference
     */
    public Rate(Name alias) {
        this(alias, RATE);
    }

    /**
     * Create a <code>public.rate</code> table reference
     */
    public Rate() {
        this(DSL.name("rate"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RateRecord> getPrimaryKey() {
        return Keys.RATE_PKEY;
    }

    @Override
    public Rate as(String alias) {
        return new Rate(DSL.name(alias), this);
    }

    @Override
    public Rate as(Name alias) {
        return new Rate(alias, this);
    }

    @Override
    public Rate as(Table<?> alias) {
        return new Rate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rate rename(String name) {
        return new Rate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rate rename(Name name) {
        return new Rate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rate rename(Table<?> name) {
        return new Rate(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rate where(Condition condition) {
        return new Rate(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rate where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rate where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rate where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rate where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rate where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rate where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rate where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rate whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rate whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
