/*
 * This file is generated by jOOQ.
 */
package org.example.table_generated.public_.tables.records;


import org.example.table_generated.public_.tables.Rate;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RateRecord extends UpdatableRecordImpl<RateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.rate.count</code>.
     */
    public void setCount(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.rate.count</code>.
     */
    public Integer getCount() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.rate.id</code>.
     */
    public void setId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.rate.id</code>.
     */
    public Integer getId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.rate.ip</code>.
     */
    public void setIp(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.rate.ip</code>.
     */
    public String getIp() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RateRecord
     */
    public RateRecord() {
        super(Rate.RATE);
    }

    /**
     * Create a detached, initialised RateRecord
     */
    public RateRecord(Integer count, Integer id, String ip) {
        super(Rate.RATE);

        setCount(count);
        setId(id);
        setIp(ip);
        resetChangedOnNotNull();
    }
}
